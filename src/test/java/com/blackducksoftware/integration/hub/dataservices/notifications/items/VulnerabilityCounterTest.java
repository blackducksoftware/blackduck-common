package com.blackducksoftware.integration.hub.dataservices.notifications.items;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.mockito.Mockito;

import com.blackducksoftware.integration.hub.api.ProjectVersionRestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.project.ProjectVersion;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationCountBuilder;
import com.blackducksoftware.integration.hub.dataservices.notification.items.NotificationCountData;
import com.blackducksoftware.integration.hub.dataservices.notification.transforms.VulnerabilityCounter;

public class VulnerabilityCounterTest {

	private static final String PROJECT_VERSION_LINK_1 = "versionLink-1";
	private static final String PROJECT_VERSION_LINK_2 = "versionLink-2";
	private static final String PROJECT_VERSION = "0.0.1";
	private static final String PROJECT_NAME_1 = "Project-1";
	private static final String PROJECT_NAME_2 = "Project-2";
	private static int vulnAdded = 2;
	private static int vulnUpdated = 3;
	private static int vulnDeleted = 5;
	private final Map<String, NotificationCountBuilder> countBuilderMap = new HashMap<>();

	private VulnerabilityCounter createCounter() throws Exception {
		final ProjectVersionRestService projectVersionService = Mockito.mock(ProjectVersionRestService.class);
		return new VulnerabilityCounter(projectVersionService, countBuilderMap);
	}

	private List<ProjectVersion> createProjectVersionList() {
		final List<ProjectVersion> list = new ArrayList<>();
		ProjectVersion projectVersion = new ProjectVersion();
		projectVersion.setProjectName(PROJECT_NAME_1);
		projectVersion.setProjectVersionName(PROJECT_VERSION);
		projectVersion.setProjectVersionLink(PROJECT_VERSION_LINK_1);
		list.add(projectVersion);
		projectVersion = new ProjectVersion();
		projectVersion.setProjectName(PROJECT_NAME_2);
		projectVersion.setProjectVersionName(PROJECT_VERSION);
		projectVersion.setProjectVersionLink(PROJECT_VERSION_LINK_2);
		list.add(projectVersion);
		return list;
	}

	@Test
	public void testVulnerabilityCounterConstructor() throws Exception {
		assertNotNull(createCounter());
	}

	@Test
	public void testVulnerabilityCount() throws Exception {
		final List<ProjectVersion> versionList = createProjectVersionList();
		final VulnerabilityCounter counter = createCounter();
		final VulnerabilityNotificationItem item = Mockito.mock(VulnerabilityNotificationItem.class);
		final VulnerabilityNotificationContent content = Mockito.mock(VulnerabilityNotificationContent.class);
		Mockito.when(content.getAffectedProjectVersions()).thenReturn(versionList);
		Mockito.when(content.getNewVulnerabilityCount()).thenReturn(vulnAdded);
		Mockito.when(content.getUpdatedVulnerabilityCount()).thenReturn(vulnUpdated);
		Mockito.when(content.getDeletedVulnerabilityCount()).thenReturn(vulnDeleted);
		Mockito.when(item.getContent()).thenReturn(content);
		final int count = 5;
		for (int index = 0; index < count; index++) {
			counter.count(item);
		}

		for (final Map.Entry<String, NotificationCountBuilder> entry : countBuilderMap.entrySet()) {
			final NotificationCountData data = entry.getValue().build();
			final String key = entry.getKey();
			if (key.equals(PROJECT_NAME_1)) {
				assertProjectVersion(data, key, PROJECT_NAME_1, PROJECT_VERSION, PROJECT_VERSION_LINK_1);
			} else if (key.equals(PROJECT_NAME_2)) {
				assertProjectVersion(data, key, PROJECT_NAME_2, PROJECT_VERSION, PROJECT_VERSION_LINK_2);
			}
			assertEquals(count, data.getVulnerabilityCount());
			assertEquals(count * vulnAdded, data.getVulnAddedCount());
			assertEquals(count * vulnUpdated, data.getVulnUpdatedCount());
			assertEquals(count * vulnDeleted, data.getVulnDeletedCount());
		}
	}

	private void assertProjectVersion(final NotificationCountData data, final String key, final String projectName,
			final String projectVersion, final String projectVersionLink) {
		assertEquals(projectName, key);
		assertEquals(projectVersion, data.getProjectVersion().getProjectVersionName());
		assertEquals(projectVersionLink, data.getProjectVersion().getProjectVersionLink());
	}
}
